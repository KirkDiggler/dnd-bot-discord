// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mockencounter is a generated GoMock package.
package mockencounter

import (
	context "context"
	entities "github.com/KirkDiggler/dnd-bot-discord/internal/domain/game/combat"
	reflect "reflect"

	encounter "github.com/KirkDiggler/dnd-bot-discord/internal/services/encounter"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddMonster mocks base method.
func (m *MockService) AddMonster(ctx context.Context, encounterID, userID string, input *encounter.AddMonsterInput) (*entities.Combatant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMonster", ctx, encounterID, userID, input)
	ret0, _ := ret[0].(*entities.Combatant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMonster indicates an expected call of AddMonster.
func (mr *MockServiceMockRecorder) AddMonster(ctx, encounterID, userID, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMonster", reflect.TypeOf((*MockService)(nil).AddMonster), ctx, encounterID, userID, input)
}

// AddPlayer mocks base method.
func (m *MockService) AddPlayer(ctx context.Context, encounterID, playerID, characterID string) (*entities.Combatant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlayer", ctx, encounterID, playerID, characterID)
	ret0, _ := ret[0].(*entities.Combatant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPlayer indicates an expected call of AddPlayer.
func (mr *MockServiceMockRecorder) AddPlayer(ctx, encounterID, playerID, characterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlayer", reflect.TypeOf((*MockService)(nil).AddPlayer), ctx, encounterID, playerID, characterID)
}

// ApplyDamage mocks base method.
func (m *MockService) ApplyDamage(ctx context.Context, encounterID, combatantID, userID string, damage int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyDamage", ctx, encounterID, combatantID, userID, damage)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyDamage indicates an expected call of ApplyDamage.
func (mr *MockServiceMockRecorder) ApplyDamage(ctx, encounterID, combatantID, userID, damage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyDamage", reflect.TypeOf((*MockService)(nil).ApplyDamage), ctx, encounterID, combatantID, userID, damage)
}

// CreateEncounter mocks base method.
func (m *MockService) CreateEncounter(ctx context.Context, input *encounter.CreateEncounterInput) (*entities.Encounter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEncounter", ctx, input)
	ret0, _ := ret[0].(*entities.Encounter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEncounter indicates an expected call of CreateEncounter.
func (mr *MockServiceMockRecorder) CreateEncounter(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEncounter", reflect.TypeOf((*MockService)(nil).CreateEncounter), ctx, input)
}

// EndEncounter mocks base method.
func (m *MockService) EndEncounter(ctx context.Context, encounterID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndEncounter", ctx, encounterID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EndEncounter indicates an expected call of EndEncounter.
func (mr *MockServiceMockRecorder) EndEncounter(ctx, encounterID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndEncounter", reflect.TypeOf((*MockService)(nil).EndEncounter), ctx, encounterID, userID)
}

// ExecuteAttackWithTarget mocks base method.
func (m *MockService) ExecuteAttackWithTarget(ctx context.Context, input *encounter.ExecuteAttackInput) (*encounter.ExecuteAttackResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAttackWithTarget", ctx, input)
	ret0, _ := ret[0].(*encounter.ExecuteAttackResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteAttackWithTarget indicates an expected call of ExecuteAttackWithTarget.
func (mr *MockServiceMockRecorder) ExecuteAttackWithTarget(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAttackWithTarget", reflect.TypeOf((*MockService)(nil).ExecuteAttackWithTarget), ctx, input)
}

// GetActiveEncounter mocks base method.
func (m *MockService) GetActiveEncounter(ctx context.Context, sessionID string) (*entities.Encounter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveEncounter", ctx, sessionID)
	ret0, _ := ret[0].(*entities.Encounter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveEncounter indicates an expected call of GetActiveEncounter.
func (mr *MockServiceMockRecorder) GetActiveEncounter(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveEncounter", reflect.TypeOf((*MockService)(nil).GetActiveEncounter), ctx, sessionID)
}

// GetEncounter mocks base method.
func (m *MockService) GetEncounter(ctx context.Context, encounterID string) (*entities.Encounter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncounter", ctx, encounterID)
	ret0, _ := ret[0].(*entities.Encounter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncounter indicates an expected call of GetEncounter.
func (mr *MockServiceMockRecorder) GetEncounter(ctx, encounterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncounter", reflect.TypeOf((*MockService)(nil).GetEncounter), ctx, encounterID)
}

// HealCombatant mocks base method.
func (m *MockService) HealCombatant(ctx context.Context, encounterID, combatantID, userID string, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealCombatant", ctx, encounterID, combatantID, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealCombatant indicates an expected call of HealCombatant.
func (mr *MockServiceMockRecorder) HealCombatant(ctx, encounterID, combatantID, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealCombatant", reflect.TypeOf((*MockService)(nil).HealCombatant), ctx, encounterID, combatantID, userID, amount)
}

// LogCombatAction mocks base method.
func (m *MockService) LogCombatAction(ctx context.Context, encounterID, action string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogCombatAction", ctx, encounterID, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogCombatAction indicates an expected call of LogCombatAction.
func (mr *MockServiceMockRecorder) LogCombatAction(ctx, encounterID, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogCombatAction", reflect.TypeOf((*MockService)(nil).LogCombatAction), ctx, encounterID, action)
}

// NextTurn mocks base method.
func (m *MockService) NextTurn(ctx context.Context, encounterID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextTurn", ctx, encounterID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// NextTurn indicates an expected call of NextTurn.
func (mr *MockServiceMockRecorder) NextTurn(ctx, encounterID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextTurn", reflect.TypeOf((*MockService)(nil).NextTurn), ctx, encounterID, userID)
}

// PerformAttack mocks base method.
func (m *MockService) PerformAttack(ctx context.Context, input *encounter.AttackInput) (*encounter.AttackResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformAttack", ctx, input)
	ret0, _ := ret[0].(*encounter.AttackResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformAttack indicates an expected call of PerformAttack.
func (mr *MockServiceMockRecorder) PerformAttack(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformAttack", reflect.TypeOf((*MockService)(nil).PerformAttack), ctx, input)
}

// ProcessAllMonsterTurns mocks base method.
func (m *MockService) ProcessAllMonsterTurns(ctx context.Context, encounterID string) ([]*encounter.AttackResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessAllMonsterTurns", ctx, encounterID)
	ret0, _ := ret[0].([]*encounter.AttackResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessAllMonsterTurns indicates an expected call of ProcessAllMonsterTurns.
func (mr *MockServiceMockRecorder) ProcessAllMonsterTurns(ctx, encounterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessAllMonsterTurns", reflect.TypeOf((*MockService)(nil).ProcessAllMonsterTurns), ctx, encounterID)
}

// ProcessMonsterTurn mocks base method.
func (m *MockService) ProcessMonsterTurn(ctx context.Context, encounterID, monsterID string) (*encounter.AttackResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMonsterTurn", ctx, encounterID, monsterID)
	ret0, _ := ret[0].(*encounter.AttackResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessMonsterTurn indicates an expected call of ProcessMonsterTurn.
func (mr *MockServiceMockRecorder) ProcessMonsterTurn(ctx, encounterID, monsterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMonsterTurn", reflect.TypeOf((*MockService)(nil).ProcessMonsterTurn), ctx, encounterID, monsterID)
}

// RemoveCombatant mocks base method.
func (m *MockService) RemoveCombatant(ctx context.Context, encounterID, combatantID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCombatant", ctx, encounterID, combatantID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCombatant indicates an expected call of RemoveCombatant.
func (mr *MockServiceMockRecorder) RemoveCombatant(ctx, encounterID, combatantID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCombatant", reflect.TypeOf((*MockService)(nil).RemoveCombatant), ctx, encounterID, combatantID, userID)
}

// RollInitiative mocks base method.
func (m *MockService) RollInitiative(ctx context.Context, encounterID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollInitiative", ctx, encounterID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollInitiative indicates an expected call of RollInitiative.
func (mr *MockServiceMockRecorder) RollInitiative(ctx, encounterID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollInitiative", reflect.TypeOf((*MockService)(nil).RollInitiative), ctx, encounterID, userID)
}

// StartEncounter mocks base method.
func (m *MockService) StartEncounter(ctx context.Context, encounterID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartEncounter", ctx, encounterID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartEncounter indicates an expected call of StartEncounter.
func (mr *MockServiceMockRecorder) StartEncounter(ctx, encounterID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEncounter", reflect.TypeOf((*MockService)(nil).StartEncounter), ctx, encounterID, userID)
}

// UpdateMessageID mocks base method.
func (m *MockService) UpdateMessageID(ctx context.Context, encounterID, messageID, channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessageID", ctx, encounterID, messageID, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMessageID indicates an expected call of UpdateMessageID.
func (mr *MockServiceMockRecorder) UpdateMessageID(ctx, encounterID, messageID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessageID", reflect.TypeOf((*MockService)(nil).UpdateMessageID), ctx, encounterID, messageID, channelID)
}
