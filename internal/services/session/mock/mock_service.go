// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_service.go -package=mocksession -source=service.go
//

// Package mocksession is a generated GoMock package.
package mocksession

import (
	context "context"
	reflect "reflect"

	session "github.com/KirkDiggler/dnd-bot-discord/internal/domain/game/session"
	session0 "github.com/KirkDiggler/dnd-bot-discord/internal/services/session"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockService) CreateSession(ctx context.Context, input *session0.CreateSessionInput) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, input)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockServiceMockRecorder) CreateSession(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockService)(nil).CreateSession), ctx, input)
}

// DeleteSession mocks base method.
func (m *MockService) DeleteSession(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockServiceMockRecorder) DeleteSession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockService)(nil).DeleteSession), ctx, sessionID)
}

// EndSession mocks base method.
func (m *MockService) EndSession(ctx context.Context, sessionID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndSession", ctx, sessionID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EndSession indicates an expected call of EndSession.
func (mr *MockServiceMockRecorder) EndSession(ctx, sessionID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndSession", reflect.TypeOf((*MockService)(nil).EndSession), ctx, sessionID, userID)
}

// GetSession mocks base method.
func (m *MockService) GetSession(ctx context.Context, sessionID string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, sessionID)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockServiceMockRecorder) GetSession(ctx, sessionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockService)(nil).GetSession), ctx, sessionID)
}

// GetSessionByInviteCode mocks base method.
func (m *MockService) GetSessionByInviteCode(ctx context.Context, code string) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByInviteCode", ctx, code)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByInviteCode indicates an expected call of GetSessionByInviteCode.
func (mr *MockServiceMockRecorder) GetSessionByInviteCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByInviteCode", reflect.TypeOf((*MockService)(nil).GetSessionByInviteCode), ctx, code)
}

// InviteToSession mocks base method.
func (m *MockService) InviteToSession(ctx context.Context, sessionID, inviterID, inviteeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteToSession", ctx, sessionID, inviterID, inviteeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InviteToSession indicates an expected call of InviteToSession.
func (mr *MockServiceMockRecorder) InviteToSession(ctx, sessionID, inviterID, inviteeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteToSession", reflect.TypeOf((*MockService)(nil).InviteToSession), ctx, sessionID, inviterID, inviteeID)
}

// JoinSession mocks base method.
func (m *MockService) JoinSession(ctx context.Context, sessionID, userID string) (*session.SessionMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinSession", ctx, sessionID, userID)
	ret0, _ := ret[0].(*session.SessionMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinSession indicates an expected call of JoinSession.
func (mr *MockServiceMockRecorder) JoinSession(ctx, sessionID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinSession", reflect.TypeOf((*MockService)(nil).JoinSession), ctx, sessionID, userID)
}

// JoinSessionByCode mocks base method.
func (m *MockService) JoinSessionByCode(ctx context.Context, code, userID string) (*session.SessionMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinSessionByCode", ctx, code, userID)
	ret0, _ := ret[0].(*session.SessionMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinSessionByCode indicates an expected call of JoinSessionByCode.
func (mr *MockServiceMockRecorder) JoinSessionByCode(ctx, code, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinSessionByCode", reflect.TypeOf((*MockService)(nil).JoinSessionByCode), ctx, code, userID)
}

// LeaveSession mocks base method.
func (m *MockService) LeaveSession(ctx context.Context, sessionID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveSession", ctx, sessionID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveSession indicates an expected call of LeaveSession.
func (mr *MockServiceMockRecorder) LeaveSession(ctx, sessionID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveSession", reflect.TypeOf((*MockService)(nil).LeaveSession), ctx, sessionID, userID)
}

// ListActiveRealmSessions mocks base method.
func (m *MockService) ListActiveRealmSessions(ctx context.Context, realmID string) ([]*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveRealmSessions", ctx, realmID)
	ret0, _ := ret[0].([]*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveRealmSessions indicates an expected call of ListActiveRealmSessions.
func (mr *MockServiceMockRecorder) ListActiveRealmSessions(ctx, realmID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveRealmSessions", reflect.TypeOf((*MockService)(nil).ListActiveRealmSessions), ctx, realmID)
}

// ListActiveUserSessions mocks base method.
func (m *MockService) ListActiveUserSessions(ctx context.Context, userID string) ([]*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveUserSessions", ctx, userID)
	ret0, _ := ret[0].([]*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveUserSessions indicates an expected call of ListActiveUserSessions.
func (mr *MockServiceMockRecorder) ListActiveUserSessions(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveUserSessions", reflect.TypeOf((*MockService)(nil).ListActiveUserSessions), ctx, userID)
}

// ListRealmSessions mocks base method.
func (m *MockService) ListRealmSessions(ctx context.Context, realmID string) ([]*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRealmSessions", ctx, realmID)
	ret0, _ := ret[0].([]*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRealmSessions indicates an expected call of ListRealmSessions.
func (mr *MockServiceMockRecorder) ListRealmSessions(ctx, realmID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRealmSessions", reflect.TypeOf((*MockService)(nil).ListRealmSessions), ctx, realmID)
}

// ListUserSessions mocks base method.
func (m *MockService) ListUserSessions(ctx context.Context, userID string) ([]*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserSessions", ctx, userID)
	ret0, _ := ret[0].([]*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserSessions indicates an expected call of ListUserSessions.
func (mr *MockServiceMockRecorder) ListUserSessions(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserSessions", reflect.TypeOf((*MockService)(nil).ListUserSessions), ctx, userID)
}

// PauseSession mocks base method.
func (m *MockService) PauseSession(ctx context.Context, sessionID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PauseSession", ctx, sessionID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PauseSession indicates an expected call of PauseSession.
func (mr *MockServiceMockRecorder) PauseSession(ctx, sessionID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseSession", reflect.TypeOf((*MockService)(nil).PauseSession), ctx, sessionID, userID)
}

// ResumeSession mocks base method.
func (m *MockService) ResumeSession(ctx context.Context, sessionID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeSession", ctx, sessionID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResumeSession indicates an expected call of ResumeSession.
func (mr *MockServiceMockRecorder) ResumeSession(ctx, sessionID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeSession", reflect.TypeOf((*MockService)(nil).ResumeSession), ctx, sessionID, userID)
}

// SaveSession mocks base method.
func (m *MockService) SaveSession(ctx context.Context, arg1 *session.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSession", ctx, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSession indicates an expected call of SaveSession.
func (mr *MockServiceMockRecorder) SaveSession(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSession", reflect.TypeOf((*MockService)(nil).SaveSession), ctx, arg1)
}

// SelectCharacter mocks base method.
func (m *MockService) SelectCharacter(ctx context.Context, sessionID, userID, characterID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectCharacter", ctx, sessionID, userID, characterID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectCharacter indicates an expected call of SelectCharacter.
func (mr *MockServiceMockRecorder) SelectCharacter(ctx, sessionID, userID, characterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectCharacter", reflect.TypeOf((*MockService)(nil).SelectCharacter), ctx, sessionID, userID, characterID)
}

// StartSession mocks base method.
func (m *MockService) StartSession(ctx context.Context, sessionID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSession", ctx, sessionID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartSession indicates an expected call of StartSession.
func (mr *MockServiceMockRecorder) StartSession(ctx, sessionID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockService)(nil).StartSession), ctx, sessionID, userID)
}

// UpdateSession mocks base method.
func (m *MockService) UpdateSession(ctx context.Context, sessionID string, input *session0.UpdateSessionInput) (*session.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", ctx, sessionID, input)
	ret0, _ := ret[0].(*session.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockServiceMockRecorder) UpdateSession(ctx, sessionID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockService)(nil).UpdateSession), ctx, sessionID, input)
}
