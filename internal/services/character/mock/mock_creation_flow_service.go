// Code generated by MockGen. DO NOT EDIT.
// Source: creation_flow.go
//
// Generated by this command:
//
//	mockgen -destination=../../services/character/mock/mock_creation_flow_service.go -package=mockcharacters -source=creation_flow.go CreationFlowService
//

// Package mockcharacters is a generated GoMock package.
package mockcharacters

import (
	context "context"
	reflect "reflect"

	character "github.com/KirkDiggler/dnd-bot-discord/internal/domain/character"
	gomock "go.uber.org/mock/gomock"
)

// MockCreationFlowService is a mock of CreationFlowService interface.
type MockCreationFlowService struct {
	ctrl     *gomock.Controller
	recorder *MockCreationFlowServiceMockRecorder
	isgomock struct{}
}

// MockCreationFlowServiceMockRecorder is the mock recorder for MockCreationFlowService.
type MockCreationFlowServiceMockRecorder struct {
	mock *MockCreationFlowService
}

// NewMockCreationFlowService creates a new mock instance.
func NewMockCreationFlowService(ctrl *gomock.Controller) *MockCreationFlowService {
	mock := &MockCreationFlowService{ctrl: ctrl}
	mock.recorder = &MockCreationFlowServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreationFlowService) EXPECT() *MockCreationFlowServiceMockRecorder {
	return m.recorder
}

// GetCurrentStep mocks base method.
func (m *MockCreationFlowService) GetCurrentStep(ctx context.Context, characterID string) (*character.CreationStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentStep", ctx, characterID)
	ret0, _ := ret[0].(*character.CreationStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentStep indicates an expected call of GetCurrentStep.
func (mr *MockCreationFlowServiceMockRecorder) GetCurrentStep(ctx, characterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentStep", reflect.TypeOf((*MockCreationFlowService)(nil).GetCurrentStep), ctx, characterID)
}

// GetNextStep mocks base method.
func (m *MockCreationFlowService) GetNextStep(ctx context.Context, characterID string) (*character.CreationStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextStep", ctx, characterID)
	ret0, _ := ret[0].(*character.CreationStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextStep indicates an expected call of GetNextStep.
func (mr *MockCreationFlowServiceMockRecorder) GetNextStep(ctx, characterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextStep", reflect.TypeOf((*MockCreationFlowService)(nil).GetNextStep), ctx, characterID)
}

// GetProgressSteps mocks base method.
func (m *MockCreationFlowService) GetProgressSteps(ctx context.Context, characterID string) ([]character.ProgressStepInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgressSteps", ctx, characterID)
	ret0, _ := ret[0].([]character.ProgressStepInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProgressSteps indicates an expected call of GetProgressSteps.
func (mr *MockCreationFlowServiceMockRecorder) GetProgressSteps(ctx, characterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgressSteps", reflect.TypeOf((*MockCreationFlowService)(nil).GetProgressSteps), ctx, characterID)
}

// IsCreationComplete mocks base method.
func (m *MockCreationFlowService) IsCreationComplete(ctx context.Context, characterID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCreationComplete", ctx, characterID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCreationComplete indicates an expected call of IsCreationComplete.
func (mr *MockCreationFlowServiceMockRecorder) IsCreationComplete(ctx, characterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCreationComplete", reflect.TypeOf((*MockCreationFlowService)(nil).IsCreationComplete), ctx, characterID)
}

// PreviewStepResult mocks base method.
func (m *MockCreationFlowService) PreviewStepResult(ctx context.Context, characterID string, result *character.CreationStepResult) (*character.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreviewStepResult", ctx, characterID, result)
	ret0, _ := ret[0].(*character.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreviewStepResult indicates an expected call of PreviewStepResult.
func (mr *MockCreationFlowServiceMockRecorder) PreviewStepResult(ctx, characterID, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreviewStepResult", reflect.TypeOf((*MockCreationFlowService)(nil).PreviewStepResult), ctx, characterID, result)
}

// ProcessStepResult mocks base method.
func (m *MockCreationFlowService) ProcessStepResult(ctx context.Context, characterID string, result *character.CreationStepResult) (*character.CreationStep, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessStepResult", ctx, characterID, result)
	ret0, _ := ret[0].(*character.CreationStep)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessStepResult indicates an expected call of ProcessStepResult.
func (mr *MockCreationFlowServiceMockRecorder) ProcessStepResult(ctx, characterID, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessStepResult", reflect.TypeOf((*MockCreationFlowService)(nil).ProcessStepResult), ctx, characterID, result)
}

// MockFlowBuilder is a mock of FlowBuilder interface.
type MockFlowBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockFlowBuilderMockRecorder
	isgomock struct{}
}

// MockFlowBuilderMockRecorder is the mock recorder for MockFlowBuilder.
type MockFlowBuilderMockRecorder struct {
	mock *MockFlowBuilder
}

// NewMockFlowBuilder creates a new mock instance.
func NewMockFlowBuilder(ctrl *gomock.Controller) *MockFlowBuilder {
	mock := &MockFlowBuilder{ctrl: ctrl}
	mock.recorder = &MockFlowBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlowBuilder) EXPECT() *MockFlowBuilderMockRecorder {
	return m.recorder
}

// BuildFlow mocks base method.
func (m *MockFlowBuilder) BuildFlow(ctx context.Context, char *character.Character) (*character.CreationFlow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildFlow", ctx, char)
	ret0, _ := ret[0].(*character.CreationFlow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildFlow indicates an expected call of BuildFlow.
func (mr *MockFlowBuilderMockRecorder) BuildFlow(ctx, char any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildFlow", reflect.TypeOf((*MockFlowBuilder)(nil).BuildFlow), ctx, char)
}
