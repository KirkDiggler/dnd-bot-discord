// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mockcharacters is a generated GoMock package.
package mockcharacters

import (
	context "context"
	character2 "github.com/KirkDiggler/dnd-bot-discord/internal/domain/character"
	"github.com/KirkDiggler/dnd-bot-discord/internal/domain/equipment"
	"github.com/KirkDiggler/dnd-bot-discord/internal/domain/rulebook/dnd5e"
	"github.com/KirkDiggler/dnd-bot-discord/internal/domain/shared"
	reflect "reflect"

	character "github.com/KirkDiggler/dnd-bot-discord/internal/services/character"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateCharacter mocks base method.
func (m *MockService) CreateCharacter(ctx context.Context, input *character.CreateCharacterInput) (*character.CreateCharacterOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCharacter", ctx, input)
	ret0, _ := ret[0].(*character.CreateCharacterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCharacter indicates an expected call of CreateCharacter.
func (mr *MockServiceMockRecorder) CreateCharacter(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCharacter", reflect.TypeOf((*MockService)(nil).CreateCharacter), ctx, input)
}

// Delete mocks base method.
func (m *MockService) Delete(characterID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", characterID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(characterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), characterID)
}

// FinalizeCharacterWithName mocks base method.
func (m *MockService) FinalizeCharacterWithName(ctx context.Context, characterID, name, raceKey, classKey string) (*character2.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeCharacterWithName", ctx, characterID, name, raceKey, classKey)
	ret0, _ := ret[0].(*character2.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeCharacterWithName indicates an expected call of FinalizeCharacterWithName.
func (mr *MockServiceMockRecorder) FinalizeCharacterWithName(ctx, characterID, name, raceKey, classKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCharacterWithName", reflect.TypeOf((*MockService)(nil).FinalizeCharacterWithName), ctx, characterID, name, raceKey, classKey)
}

// FinalizeDraftCharacter mocks base method.
func (m *MockService) FinalizeDraftCharacter(ctx context.Context, characterID string) (*character2.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeDraftCharacter", ctx, characterID)
	ret0, _ := ret[0].(*character2.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeDraftCharacter indicates an expected call of FinalizeDraftCharacter.
func (mr *MockServiceMockRecorder) FinalizeDraftCharacter(ctx, characterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeDraftCharacter", reflect.TypeOf((*MockService)(nil).FinalizeDraftCharacter), ctx, characterID)
}

// FixCharacterAttributes mocks base method.
func (m *MockService) FixCharacterAttributes(ctx context.Context, characterID string) (*character2.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FixCharacterAttributes", ctx, characterID)
	ret0, _ := ret[0].(*character2.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FixCharacterAttributes indicates an expected call of FixCharacterAttributes.
func (mr *MockServiceMockRecorder) FixCharacterAttributes(ctx, characterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FixCharacterAttributes", reflect.TypeOf((*MockService)(nil).FixCharacterAttributes), ctx, characterID)
}

// GetByID mocks base method.
func (m *MockService) GetByID(characterID string) (*character2.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", characterID)
	ret0, _ := ret[0].(*character2.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockServiceMockRecorder) GetByID(characterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockService)(nil).GetByID), characterID)
}

// GetCharacter mocks base method.
func (m *MockService) GetCharacter(ctx context.Context, characterID string) (*character2.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacter", ctx, characterID)
	ret0, _ := ret[0].(*character2.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacter indicates an expected call of GetCharacter.
func (mr *MockServiceMockRecorder) GetCharacter(ctx, characterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacter", reflect.TypeOf((*MockService)(nil).GetCharacter), ctx, characterID)
}

// GetCharacterCreationSession mocks base method.
func (m *MockService) GetCharacterCreationSession(ctx context.Context, sessionID string) (*character2.CharacterCreationSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacterCreationSession", ctx, sessionID)
	ret0, _ := ret[0].(*character2.CharacterCreationSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacterCreationSession indicates an expected call of GetCharacterCreationSession.
func (mr *MockServiceMockRecorder) GetCharacterCreationSession(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacterCreationSession", reflect.TypeOf((*MockService)(nil).GetCharacterCreationSession), ctx, sessionID)
}

// GetCharacterFromSession mocks base method.
func (m *MockService) GetCharacterFromSession(ctx context.Context, sessionID string) (*character2.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacterFromSession", ctx, sessionID)
	ret0, _ := ret[0].(*character2.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacterFromSession indicates an expected call of GetCharacterFromSession.
func (mr *MockServiceMockRecorder) GetCharacterFromSession(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacterFromSession", reflect.TypeOf((*MockService)(nil).GetCharacterFromSession), ctx, sessionID)
}

// GetClass mocks base method.
func (m *MockService) GetClass(ctx context.Context, classKey string) (*rulebook.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClass", ctx, classKey)
	ret0, _ := ret[0].(*rulebook.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClass indicates an expected call of GetClass.
func (mr *MockServiceMockRecorder) GetClass(ctx, classKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClass", reflect.TypeOf((*MockService)(nil).GetClass), ctx, classKey)
}

// GetClasses mocks base method.
func (m *MockService) GetClasses(ctx context.Context) ([]*rulebook.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClasses", ctx)
	ret0, _ := ret[0].([]*rulebook.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClasses indicates an expected call of GetClasses.
func (mr *MockServiceMockRecorder) GetClasses(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClasses", reflect.TypeOf((*MockService)(nil).GetClasses), ctx)
}

// GetEquipmentByCategory mocks base method.
func (m *MockService) GetEquipmentByCategory(ctx context.Context, category string) ([]equipment.Equipment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEquipmentByCategory", ctx, category)
	ret0, _ := ret[0].([]equipment.Equipment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEquipmentByCategory indicates an expected call of GetEquipmentByCategory.
func (mr *MockServiceMockRecorder) GetEquipmentByCategory(ctx, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEquipmentByCategory", reflect.TypeOf((*MockService)(nil).GetEquipmentByCategory), ctx, category)
}

// GetOrCreateDraftCharacter mocks base method.
func (m *MockService) GetOrCreateDraftCharacter(ctx context.Context, userID, realmID string) (*character2.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateDraftCharacter", ctx, userID, realmID)
	ret0, _ := ret[0].(*character2.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateDraftCharacter indicates an expected call of GetOrCreateDraftCharacter.
func (mr *MockServiceMockRecorder) GetOrCreateDraftCharacter(ctx, userID, realmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateDraftCharacter", reflect.TypeOf((*MockService)(nil).GetOrCreateDraftCharacter), ctx, userID, realmID)
}

// GetRace mocks base method.
func (m *MockService) GetRace(ctx context.Context, raceKey string) (*rulebook.Race, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRace", ctx, raceKey)
	ret0, _ := ret[0].(*rulebook.Race)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRace indicates an expected call of GetRace.
func (mr *MockServiceMockRecorder) GetRace(ctx, raceKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRace", reflect.TypeOf((*MockService)(nil).GetRace), ctx, raceKey)
}

// GetRaces mocks base method.
func (m *MockService) GetRaces(ctx context.Context) ([]*rulebook.Race, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaces", ctx)
	ret0, _ := ret[0].([]*rulebook.Race)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRaces indicates an expected call of GetRaces.
func (mr *MockServiceMockRecorder) GetRaces(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaces", reflect.TypeOf((*MockService)(nil).GetRaces), ctx)
}

// ListByOwner mocks base method.
func (m *MockService) ListByOwner(ownerID string) ([]*character2.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByOwner", ownerID)
	ret0, _ := ret[0].([]*character2.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByOwner indicates an expected call of ListByOwner.
func (mr *MockServiceMockRecorder) ListByOwner(ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByOwner", reflect.TypeOf((*MockService)(nil).ListByOwner), ownerID)
}

// ListCharacters mocks base method.
func (m *MockService) ListCharacters(ctx context.Context, userID string) ([]*character2.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCharacters", ctx, userID)
	ret0, _ := ret[0].([]*character2.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCharacters indicates an expected call of ListCharacters.
func (mr *MockServiceMockRecorder) ListCharacters(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCharacters", reflect.TypeOf((*MockService)(nil).ListCharacters), ctx, userID)
}

// ResolveChoices mocks base method.
func (m *MockService) ResolveChoices(ctx context.Context, input *character.ResolveChoicesInput) (*character.ResolveChoicesOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveChoices", ctx, input)
	ret0, _ := ret[0].(*character.ResolveChoicesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveChoices indicates an expected call of ResolveChoices.
func (mr *MockServiceMockRecorder) ResolveChoices(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveChoices", reflect.TypeOf((*MockService)(nil).ResolveChoices), ctx, input)
}

// StartCharacterCreation mocks base method.
func (m *MockService) StartCharacterCreation(ctx context.Context, userID, guildID string) (*character2.CharacterCreationSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCharacterCreation", ctx, userID, guildID)
	ret0, _ := ret[0].(*character2.CharacterCreationSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartCharacterCreation indicates an expected call of StartCharacterCreation.
func (mr *MockServiceMockRecorder) StartCharacterCreation(ctx, userID, guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCharacterCreation", reflect.TypeOf((*MockService)(nil).StartCharacterCreation), ctx, userID, guildID)
}

// StartFreshCharacterCreation mocks base method.
func (m *MockService) StartFreshCharacterCreation(ctx context.Context, userID, realmID string) (*character2.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartFreshCharacterCreation", ctx, userID, realmID)
	ret0, _ := ret[0].(*character2.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartFreshCharacterCreation indicates an expected call of StartFreshCharacterCreation.
func (mr *MockServiceMockRecorder) StartFreshCharacterCreation(ctx, userID, realmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartFreshCharacterCreation", reflect.TypeOf((*MockService)(nil).StartFreshCharacterCreation), ctx, userID, realmID)
}

// UpdateCharacterCreationSession mocks base method.
func (m *MockService) UpdateCharacterCreationSession(ctx context.Context, sessionID, step string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCharacterCreationSession", ctx, sessionID, step)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCharacterCreationSession indicates an expected call of UpdateCharacterCreationSession.
func (mr *MockServiceMockRecorder) UpdateCharacterCreationSession(ctx, sessionID, step interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCharacterCreationSession", reflect.TypeOf((*MockService)(nil).UpdateCharacterCreationSession), ctx, sessionID, step)
}

// UpdateDraftCharacter mocks base method.
func (m *MockService) UpdateDraftCharacter(ctx context.Context, characterID string, updates *character.UpdateDraftInput) (*character2.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDraftCharacter", ctx, characterID, updates)
	ret0, _ := ret[0].(*character2.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDraftCharacter indicates an expected call of UpdateDraftCharacter.
func (mr *MockServiceMockRecorder) UpdateDraftCharacter(ctx, characterID, updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDraftCharacter", reflect.TypeOf((*MockService)(nil).UpdateDraftCharacter), ctx, characterID, updates)
}

// UpdateEquipment mocks base method.
func (m *MockService) UpdateEquipment(character *character2.Character) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEquipment", character)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEquipment indicates an expected call of UpdateEquipment.
func (mr *MockServiceMockRecorder) UpdateEquipment(character interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEquipment", reflect.TypeOf((*MockService)(nil).UpdateEquipment), character)
}

// UpdateStatus mocks base method.
func (m *MockService) UpdateStatus(characterID string, status shared.CharacterStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", characterID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockServiceMockRecorder) UpdateStatus(characterID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockService)(nil).UpdateStatus), characterID, status)
}

// ValidateCharacterCreation mocks base method.
func (m *MockService) ValidateCharacterCreation(ctx context.Context, input *character.ValidateCharacterInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCharacterCreation", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCharacterCreation indicates an expected call of ValidateCharacterCreation.
func (mr *MockServiceMockRecorder) ValidateCharacterCreation(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCharacterCreation", reflect.TypeOf((*MockService)(nil).ValidateCharacterCreation), ctx, input)
}
