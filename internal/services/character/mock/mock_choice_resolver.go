// Code generated by MockGen. DO NOT EDIT.
// Source: choice_resolver.go
//
// Generated by this command:
//
//	mockgen -destination=mock/mock_choice_resolver.go -package=mockcharacters -source=choice_resolver.go
//

// Package mockcharacters is a generated GoMock package.
package mockcharacters

import (
	context "context"
	reflect "reflect"

	entities "github.com/KirkDiggler/dnd-bot-discord/internal/entities"
	character "github.com/KirkDiggler/dnd-bot-discord/internal/services/character"
	gomock "go.uber.org/mock/gomock"
)

// MockChoiceResolver is a mock of ChoiceResolver interface.
type MockChoiceResolver struct {
	ctrl     *gomock.Controller
	recorder *MockChoiceResolverMockRecorder
	isgomock struct{}
}

// MockChoiceResolverMockRecorder is the mock recorder for MockChoiceResolver.
type MockChoiceResolverMockRecorder struct {
	mock *MockChoiceResolver
}

// NewMockChoiceResolver creates a new mock instance.
func NewMockChoiceResolver(ctrl *gomock.Controller) *MockChoiceResolver {
	mock := &MockChoiceResolver{ctrl: ctrl}
	mock.recorder = &MockChoiceResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChoiceResolver) EXPECT() *MockChoiceResolverMockRecorder {
	return m.recorder
}

// ResolveEquipmentChoices mocks base method.
func (m *MockChoiceResolver) ResolveEquipmentChoices(ctx context.Context, class *entities.Class) ([]character.SimplifiedChoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveEquipmentChoices", ctx, class)
	ret0, _ := ret[0].([]character.SimplifiedChoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveEquipmentChoices indicates an expected call of ResolveEquipmentChoices.
func (mr *MockChoiceResolverMockRecorder) ResolveEquipmentChoices(ctx, class any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveEquipmentChoices", reflect.TypeOf((*MockChoiceResolver)(nil).ResolveEquipmentChoices), ctx, class)
}

// ResolveProficiencyChoices mocks base method.
func (m *MockChoiceResolver) ResolveProficiencyChoices(ctx context.Context, race *entities.Race, class *entities.Class) ([]character.SimplifiedChoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveProficiencyChoices", ctx, race, class)
	ret0, _ := ret[0].([]character.SimplifiedChoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveProficiencyChoices indicates an expected call of ResolveProficiencyChoices.
func (mr *MockChoiceResolverMockRecorder) ResolveProficiencyChoices(ctx, race, class any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveProficiencyChoices", reflect.TypeOf((*MockChoiceResolver)(nil).ResolveProficiencyChoices), ctx, race, class)
}

// ValidateProficiencySelections mocks base method.
func (m *MockChoiceResolver) ValidateProficiencySelections(ctx context.Context, race *entities.Race, class *entities.Class, selections []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateProficiencySelections", ctx, race, class, selections)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateProficiencySelections indicates an expected call of ValidateProficiencySelections.
func (mr *MockChoiceResolverMockRecorder) ValidateProficiencySelections(ctx, race, class, selections any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateProficiencySelections", reflect.TypeOf((*MockChoiceResolver)(nil).ValidateProficiencySelections), ctx, race, class, selections)
}
