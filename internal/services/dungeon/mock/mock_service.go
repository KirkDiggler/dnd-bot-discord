// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mockdungeon is a generated GoMock package.
package mockdungeon

import (
	context "context"
	reflect "reflect"

	entities "github.com/KirkDiggler/dnd-bot-discord/internal/entities"
	dungeon "github.com/KirkDiggler/dnd-bot-discord/internal/services/dungeon"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AbandonDungeon mocks base method.
func (m *MockService) AbandonDungeon(ctx context.Context, dungeonID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbandonDungeon", ctx, dungeonID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbandonDungeon indicates an expected call of AbandonDungeon.
func (mr *MockServiceMockRecorder) AbandonDungeon(ctx, dungeonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbandonDungeon", reflect.TypeOf((*MockService)(nil).AbandonDungeon), ctx, dungeonID)
}

// CompleteRoom mocks base method.
func (m *MockService) CompleteRoom(ctx context.Context, dungeonID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteRoom", ctx, dungeonID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteRoom indicates an expected call of CompleteRoom.
func (mr *MockServiceMockRecorder) CompleteRoom(ctx, dungeonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteRoom", reflect.TypeOf((*MockService)(nil).CompleteRoom), ctx, dungeonID)
}

// CreateDungeon mocks base method.
func (m *MockService) CreateDungeon(ctx context.Context, input *dungeon.CreateDungeonInput) (*entities.Dungeon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDungeon", ctx, input)
	ret0, _ := ret[0].(*entities.Dungeon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDungeon indicates an expected call of CreateDungeon.
func (mr *MockServiceMockRecorder) CreateDungeon(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDungeon", reflect.TypeOf((*MockService)(nil).CreateDungeon), ctx, input)
}

// EnterRoom mocks base method.
func (m *MockService) EnterRoom(ctx context.Context, dungeonID string) (*entities.DungeonRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnterRoom", ctx, dungeonID)
	ret0, _ := ret[0].(*entities.DungeonRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnterRoom indicates an expected call of EnterRoom.
func (mr *MockServiceMockRecorder) EnterRoom(ctx, dungeonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnterRoom", reflect.TypeOf((*MockService)(nil).EnterRoom), ctx, dungeonID)
}

// GetAvailableActions mocks base method.
func (m *MockService) GetAvailableActions(ctx context.Context, dungeonID string) ([]dungeon.DungeonAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableActions", ctx, dungeonID)
	ret0, _ := ret[0].([]dungeon.DungeonAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableActions indicates an expected call of GetAvailableActions.
func (mr *MockServiceMockRecorder) GetAvailableActions(ctx, dungeonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableActions", reflect.TypeOf((*MockService)(nil).GetAvailableActions), ctx, dungeonID)
}

// GetDungeon mocks base method.
func (m *MockService) GetDungeon(ctx context.Context, dungeonID string) (*entities.Dungeon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDungeon", ctx, dungeonID)
	ret0, _ := ret[0].(*entities.Dungeon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDungeon indicates an expected call of GetDungeon.
func (mr *MockServiceMockRecorder) GetDungeon(ctx, dungeonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDungeon", reflect.TypeOf((*MockService)(nil).GetDungeon), ctx, dungeonID)
}

// JoinDungeon mocks base method.
func (m *MockService) JoinDungeon(ctx context.Context, dungeonID, userID, characterID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinDungeon", ctx, dungeonID, userID, characterID)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinDungeon indicates an expected call of JoinDungeon.
func (mr *MockServiceMockRecorder) JoinDungeon(ctx, dungeonID, userID, characterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinDungeon", reflect.TypeOf((*MockService)(nil).JoinDungeon), ctx, dungeonID, userID, characterID)
}

// ProceedToNextRoom mocks base method.
func (m *MockService) ProceedToNextRoom(ctx context.Context, dungeonID string) (*entities.DungeonRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProceedToNextRoom", ctx, dungeonID)
	ret0, _ := ret[0].(*entities.DungeonRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProceedToNextRoom indicates an expected call of ProceedToNextRoom.
func (mr *MockServiceMockRecorder) ProceedToNextRoom(ctx, dungeonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProceedToNextRoom", reflect.TypeOf((*MockService)(nil).ProceedToNextRoom), ctx, dungeonID)
}
