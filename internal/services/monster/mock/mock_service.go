// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mockmonster is a generated GoMock package.
package mockmonster

import (
	context "context"
	entities "github.com/KirkDiggler/dnd-bot-discord/internal/domain/game/combat"
	reflect "reflect"

	monster "github.com/KirkDiggler/dnd-bot-discord/internal/services/monster"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetMonster mocks base method.
func (m *MockService) GetMonster(ctx context.Context, key string) (*entities.MonsterTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonster", ctx, key)
	ret0, _ := ret[0].(*entities.MonsterTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonster indicates an expected call of GetMonster.
func (mr *MockServiceMockRecorder) GetMonster(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonster", reflect.TypeOf((*MockService)(nil).GetMonster), ctx, key)
}

// GetMonsterForEncounter mocks base method.
func (m *MockService) GetMonsterForEncounter(template *entities.MonsterTemplate) *monster.MonsterEncounterData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonsterForEncounter", template)
	ret0, _ := ret[0].(*monster.MonsterEncounterData)
	return ret0
}

// GetMonsterForEncounter indicates an expected call of GetMonsterForEncounter.
func (mr *MockServiceMockRecorder) GetMonsterForEncounter(template interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonsterForEncounter", reflect.TypeOf((*MockService)(nil).GetMonsterForEncounter), template)
}

// GetMonstersByCR mocks base method.
func (m *MockService) GetMonstersByCR(ctx context.Context, minCR, maxCR float32) ([]*entities.MonsterTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonstersByCR", ctx, minCR, maxCR)
	ret0, _ := ret[0].([]*entities.MonsterTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonstersByCR indicates an expected call of GetMonstersByCR.
func (mr *MockServiceMockRecorder) GetMonstersByCR(ctx, minCR, maxCR interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonstersByCR", reflect.TypeOf((*MockService)(nil).GetMonstersByCR), ctx, minCR, maxCR)
}

// GetRandomMonsters mocks base method.
func (m *MockService) GetRandomMonsters(ctx context.Context, difficulty string, count int) ([]*entities.MonsterTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomMonsters", ctx, difficulty, count)
	ret0, _ := ret[0].([]*entities.MonsterTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomMonsters indicates an expected call of GetRandomMonsters.
func (mr *MockServiceMockRecorder) GetRandomMonsters(ctx, difficulty, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomMonsters", reflect.TypeOf((*MockService)(nil).GetRandomMonsters), ctx, difficulty, count)
}
