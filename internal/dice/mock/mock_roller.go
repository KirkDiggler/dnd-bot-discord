// Code generated by MockGen. DO NOT EDIT.
// Source: roller.go

// Package mockdice is a generated GoMock package.
package mockdice

import (
	reflect "reflect"

	dice "github.com/KirkDiggler/dnd-bot-discord/internal/dice"
	gomock "go.uber.org/mock/gomock"
)

// MockRoller is a mock of Roller interface.
type MockRoller struct {
	ctrl     *gomock.Controller
	recorder *MockRollerMockRecorder
}

// MockRollerMockRecorder is the mock recorder for MockRoller.
type MockRollerMockRecorder struct {
	mock *MockRoller
}

// NewMockRoller creates a new mock instance.
func NewMockRoller(ctrl *gomock.Controller) *MockRoller {
	mock := &MockRoller{ctrl: ctrl}
	mock.recorder = &MockRollerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoller) EXPECT() *MockRollerMockRecorder {
	return m.recorder
}

// Roll mocks base method.
func (m *MockRoller) Roll(count, sides, bonus int) (*dice.RollResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roll", count, sides, bonus)
	ret0, _ := ret[0].(*dice.RollResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Roll indicates an expected call of Roll.
func (mr *MockRollerMockRecorder) Roll(count, sides, bonus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roll", reflect.TypeOf((*MockRoller)(nil).Roll), count, sides, bonus)
}

// RollWithAdvantage mocks base method.
func (m *MockRoller) RollWithAdvantage(sides, bonus int) (*dice.RollResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollWithAdvantage", sides, bonus)
	ret0, _ := ret[0].(*dice.RollResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollWithAdvantage indicates an expected call of RollWithAdvantage.
func (mr *MockRollerMockRecorder) RollWithAdvantage(sides, bonus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollWithAdvantage", reflect.TypeOf((*MockRoller)(nil).RollWithAdvantage), sides, bonus)
}

// RollWithDisadvantage mocks base method.
func (m *MockRoller) RollWithDisadvantage(sides, bonus int) (*dice.RollResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollWithDisadvantage", sides, bonus)
	ret0, _ := ret[0].(*dice.RollResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RollWithDisadvantage indicates an expected call of RollWithDisadvantage.
func (mr *MockRollerMockRecorder) RollWithDisadvantage(sides, bonus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollWithDisadvantage", reflect.TypeOf((*MockRoller)(nil).RollWithDisadvantage), sides, bonus)
}
