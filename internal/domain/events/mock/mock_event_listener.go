// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/events/interfaces.go
//
// Generated by this command:
//
//	mockgen -destination=internal/domain/events/mock/mock_event_listener.go -package=mockevents -source=internal/domain/events/interfaces.go
//

// Package mockevents is a generated GoMock package.
package mockevents

import (
	reflect "reflect"

	events "github.com/KirkDiggler/dnd-bot-discord/internal/domain/events"
	gomock "go.uber.org/mock/gomock"
)

// MockEventListener is a mock of EventListener interface.
type MockEventListener struct {
	ctrl     *gomock.Controller
	recorder *MockEventListenerMockRecorder
	isgomock struct{}
}

// MockEventListenerMockRecorder is the mock recorder for MockEventListener.
type MockEventListenerMockRecorder struct {
	mock *MockEventListener
}

// NewMockEventListener creates a new mock instance.
func NewMockEventListener(ctrl *gomock.Controller) *MockEventListener {
	mock := &MockEventListener{ctrl: ctrl}
	mock.recorder = &MockEventListenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventListener) EXPECT() *MockEventListenerMockRecorder {
	return m.recorder
}

// HandleEvent mocks base method.
func (m *MockEventListener) HandleEvent(event *events.GameEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleEvent indicates an expected call of HandleEvent.
func (mr *MockEventListenerMockRecorder) HandleEvent(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockEventListener)(nil).HandleEvent), event)
}

// Priority mocks base method.
func (m *MockEventListener) Priority() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Priority")
	ret0, _ := ret[0].(int)
	return ret0
}

// Priority indicates an expected call of Priority.
func (mr *MockEventListenerMockRecorder) Priority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Priority", reflect.TypeOf((*MockEventListener)(nil).Priority))
}

// MockModifier is a mock of Modifier interface.
type MockModifier struct {
	ctrl     *gomock.Controller
	recorder *MockModifierMockRecorder
	isgomock struct{}
}

// MockModifierMockRecorder is the mock recorder for MockModifier.
type MockModifierMockRecorder struct {
	mock *MockModifier
}

// NewMockModifier creates a new mock instance.
func NewMockModifier(ctrl *gomock.Controller) *MockModifier {
	mock := &MockModifier{ctrl: ctrl}
	mock.recorder = &MockModifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModifier) EXPECT() *MockModifierMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockModifier) Apply(event *events.GameEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockModifierMockRecorder) Apply(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockModifier)(nil).Apply), event)
}

// Condition mocks base method.
func (m *MockModifier) Condition(event *events.GameEvent) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Condition", event)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Condition indicates an expected call of Condition.
func (mr *MockModifierMockRecorder) Condition(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Condition", reflect.TypeOf((*MockModifier)(nil).Condition), event)
}

// Duration mocks base method.
func (m *MockModifier) Duration() events.ModifierDuration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Duration")
	ret0, _ := ret[0].(events.ModifierDuration)
	return ret0
}

// Duration indicates an expected call of Duration.
func (mr *MockModifierMockRecorder) Duration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duration", reflect.TypeOf((*MockModifier)(nil).Duration))
}

// ID mocks base method.
func (m *MockModifier) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockModifierMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockModifier)(nil).ID))
}

// Priority mocks base method.
func (m *MockModifier) Priority() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Priority")
	ret0, _ := ret[0].(int)
	return ret0
}

// Priority indicates an expected call of Priority.
func (mr *MockModifierMockRecorder) Priority() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Priority", reflect.TypeOf((*MockModifier)(nil).Priority))
}

// Source mocks base method.
func (m *MockModifier) Source() events.ModifierSource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Source")
	ret0, _ := ret[0].(events.ModifierSource)
	return ret0
}

// Source indicates an expected call of Source.
func (mr *MockModifierMockRecorder) Source() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Source", reflect.TypeOf((*MockModifier)(nil).Source))
}

// MockModifierDuration is a mock of ModifierDuration interface.
type MockModifierDuration struct {
	ctrl     *gomock.Controller
	recorder *MockModifierDurationMockRecorder
	isgomock struct{}
}

// MockModifierDurationMockRecorder is the mock recorder for MockModifierDuration.
type MockModifierDurationMockRecorder struct {
	mock *MockModifierDuration
}

// NewMockModifierDuration creates a new mock instance.
func NewMockModifierDuration(ctrl *gomock.Controller) *MockModifierDuration {
	mock := &MockModifierDuration{ctrl: ctrl}
	mock.recorder = &MockModifierDurationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModifierDuration) EXPECT() *MockModifierDurationMockRecorder {
	return m.recorder
}

// IsExpired mocks base method.
func (m *MockModifierDuration) IsExpired() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExpired")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExpired indicates an expected call of IsExpired.
func (mr *MockModifierDurationMockRecorder) IsExpired() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExpired", reflect.TypeOf((*MockModifierDuration)(nil).IsExpired))
}

// OnEventOccurred mocks base method.
func (m *MockModifierDuration) OnEventOccurred(event *events.GameEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnEventOccurred", event)
}

// OnEventOccurred indicates an expected call of OnEventOccurred.
func (mr *MockModifierDurationMockRecorder) OnEventOccurred(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnEventOccurred", reflect.TypeOf((*MockModifierDuration)(nil).OnEventOccurred), event)
}
