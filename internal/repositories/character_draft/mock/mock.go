// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination=mock/mock.go -package=mockcharacterdraft -source=interface.go
//

// Package mockcharacterdraft is a generated GoMock package.
package mockcharacterdraft

import (
	context "context"
	reflect "reflect"

	character "github.com/KirkDiggler/dnd-bot-discord/internal/domain/character"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, draft *character.CharacterDraft) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, draft)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, draft any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, draft)
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, id string) (*character.CharacterDraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*character.CharacterDraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, id)
}

// GetByCharacterID mocks base method.
func (m *MockRepository) GetByCharacterID(ctx context.Context, characterID string) (*character.CharacterDraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCharacterID", ctx, characterID)
	ret0, _ := ret[0].(*character.CharacterDraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCharacterID indicates an expected call of GetByCharacterID.
func (mr *MockRepositoryMockRecorder) GetByCharacterID(ctx, characterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCharacterID", reflect.TypeOf((*MockRepository)(nil).GetByCharacterID), ctx, characterID)
}

// GetByOwnerAndRealm mocks base method.
func (m *MockRepository) GetByOwnerAndRealm(ctx context.Context, ownerID, realmID string) (*character.CharacterDraft, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOwnerAndRealm", ctx, ownerID, realmID)
	ret0, _ := ret[0].(*character.CharacterDraft)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOwnerAndRealm indicates an expected call of GetByOwnerAndRealm.
func (mr *MockRepositoryMockRecorder) GetByOwnerAndRealm(ctx, ownerID, realmID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOwnerAndRealm", reflect.TypeOf((*MockRepository)(nil).GetByOwnerAndRealm), ctx, ownerID, realmID)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, draft *character.CharacterDraft) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, draft)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, draft any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, draft)
}
