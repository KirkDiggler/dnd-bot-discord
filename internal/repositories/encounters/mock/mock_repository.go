// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mockencrepo is a generated GoMock package.
package mockencrepo

import (
	context "context"
	entities "github.com/KirkDiggler/dnd-bot-discord/internal/domain/game/combat"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, encounter *entities.Encounter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, encounter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, encounter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, encounter)
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, id string) (*entities.Encounter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*entities.Encounter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, id)
}

// GetActiveBySession mocks base method.
func (m *MockRepository) GetActiveBySession(ctx context.Context, sessionID string) (*entities.Encounter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveBySession", ctx, sessionID)
	ret0, _ := ret[0].(*entities.Encounter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveBySession indicates an expected call of GetActiveBySession.
func (mr *MockRepositoryMockRecorder) GetActiveBySession(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveBySession", reflect.TypeOf((*MockRepository)(nil).GetActiveBySession), ctx, sessionID)
}

// GetByMessage mocks base method.
func (m *MockRepository) GetByMessage(ctx context.Context, messageID string) (*entities.Encounter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMessage", ctx, messageID)
	ret0, _ := ret[0].(*entities.Encounter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMessage indicates an expected call of GetByMessage.
func (mr *MockRepositoryMockRecorder) GetByMessage(ctx, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMessage", reflect.TypeOf((*MockRepository)(nil).GetByMessage), ctx, messageID)
}

// GetBySession mocks base method.
func (m *MockRepository) GetBySession(ctx context.Context, sessionID string) ([]*entities.Encounter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySession", ctx, sessionID)
	ret0, _ := ret[0].([]*entities.Encounter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySession indicates an expected call of GetBySession.
func (mr *MockRepositoryMockRecorder) GetBySession(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySession", reflect.TypeOf((*MockRepository)(nil).GetBySession), ctx, sessionID)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, encounter *entities.Encounter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, encounter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, encounter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, encounter)
}
