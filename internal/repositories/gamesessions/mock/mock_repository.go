// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mockgamesessions is a generated GoMock package.
package mockgamesessions

import (
	context "context"
	reflect "reflect"

	entities "github.com/KirkDiggler/dnd-bot-discord/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, session *entities.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, session)
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, id string) (*entities.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*entities.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, id)
}

// GetActiveByRealm mocks base method.
func (m *MockRepository) GetActiveByRealm(ctx context.Context, realmID string) ([]*entities.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveByRealm", ctx, realmID)
	ret0, _ := ret[0].([]*entities.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveByRealm indicates an expected call of GetActiveByRealm.
func (mr *MockRepositoryMockRecorder) GetActiveByRealm(ctx, realmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveByRealm", reflect.TypeOf((*MockRepository)(nil).GetActiveByRealm), ctx, realmID)
}

// GetActiveByUser mocks base method.
func (m *MockRepository) GetActiveByUser(ctx context.Context, userID string) ([]*entities.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveByUser", ctx, userID)
	ret0, _ := ret[0].([]*entities.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveByUser indicates an expected call of GetActiveByUser.
func (mr *MockRepositoryMockRecorder) GetActiveByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveByUser", reflect.TypeOf((*MockRepository)(nil).GetActiveByUser), ctx, userID)
}

// GetByInviteCode mocks base method.
func (m *MockRepository) GetByInviteCode(ctx context.Context, code string) (*entities.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByInviteCode", ctx, code)
	ret0, _ := ret[0].(*entities.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByInviteCode indicates an expected call of GetByInviteCode.
func (mr *MockRepositoryMockRecorder) GetByInviteCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByInviteCode", reflect.TypeOf((*MockRepository)(nil).GetByInviteCode), ctx, code)
}

// GetByRealm mocks base method.
func (m *MockRepository) GetByRealm(ctx context.Context, realmID string) ([]*entities.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRealm", ctx, realmID)
	ret0, _ := ret[0].([]*entities.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRealm indicates an expected call of GetByRealm.
func (mr *MockRepositoryMockRecorder) GetByRealm(ctx, realmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRealm", reflect.TypeOf((*MockRepository)(nil).GetByRealm), ctx, realmID)
}

// GetByUser mocks base method.
func (m *MockRepository) GetByUser(ctx context.Context, userID string) ([]*entities.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUser", ctx, userID)
	ret0, _ := ret[0].([]*entities.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUser indicates an expected call of GetByUser.
func (mr *MockRepositoryMockRecorder) GetByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUser", reflect.TypeOf((*MockRepository)(nil).GetByUser), ctx, userID)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, session *entities.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, session)
}
