// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination=mock/mock.go -package=mockcharacters -source=interface.go
//

// Package mockcharacters is a generated GoMock package.
package mockcharacters

import (
	context "context"
	reflect "reflect"

	entities "github.com/KirkDiggler/dnd-bot-discord/internal/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, character *entities.Character) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, character)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, character any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, character)
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, id string) (*entities.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*entities.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, id)
}

// GetByOwner mocks base method.
func (m *MockRepository) GetByOwner(ctx context.Context, ownerID string) ([]*entities.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOwner", ctx, ownerID)
	ret0, _ := ret[0].([]*entities.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOwner indicates an expected call of GetByOwner.
func (mr *MockRepositoryMockRecorder) GetByOwner(ctx, ownerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOwner", reflect.TypeOf((*MockRepository)(nil).GetByOwner), ctx, ownerID)
}

// GetByOwnerAndRealm mocks base method.
func (m *MockRepository) GetByOwnerAndRealm(ctx context.Context, ownerID, realmID string) ([]*entities.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOwnerAndRealm", ctx, ownerID, realmID)
	ret0, _ := ret[0].([]*entities.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOwnerAndRealm indicates an expected call of GetByOwnerAndRealm.
func (mr *MockRepositoryMockRecorder) GetByOwnerAndRealm(ctx, ownerID, realmID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOwnerAndRealm", reflect.TypeOf((*MockRepository)(nil).GetByOwnerAndRealm), ctx, ownerID, realmID)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, character *entities.Character) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, character)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, character any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, character)
}
